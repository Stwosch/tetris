(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vector_1 = require("../vector");
class Block {
    constructor() { }
    getBlockPosition(startPosition) {
        return this._vectors.map((vector) => vector.plus(startPosition));
    }
    get type() {
        return this._type;
    }
    get width() {
        return this._width;
    }
    set vectors(vectors) {
        this._vectors = vectors;
    }
    get vectors() {
        return this._vectors;
    }
}
exports.Block = Block;
class EmptyBlock extends Block {
    constructor() {
        super();
        this._type = 'empty';
    }
}
exports.EmptyBlock = EmptyBlock;
class OBlock extends Block {
    constructor() {
        super();
        this._type = 'o';
        this._vectors = [
            new vector_1.Vector(0, 0),
            new vector_1.Vector(1, 0),
            new vector_1.Vector(0, 1),
            new vector_1.Vector(1, 1)
        ];
        this._width = 2;
        this._height = 2;
    }
}
exports.OBlock = OBlock;
},{"../vector":8}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const useful_functions_1 = require("../useful-functions");
const block_1 = require("../block");
class Board {
    constructor(width, height) {
        this._width = width;
        this._height = height;
    }
    get width() {
        return this._width;
    }
    set width(width) {
        this._width = width;
    }
    get height() {
        return this._height;
    }
    set height(height) {
        this._height = height;
    }
    get area() {
        return this._area;
    }
    setAreaBlock(vector, block) {
        this._area[vector.y][vector.x] = block;
    }
    initArea() {
        this._area = [];
        useful_functions_1.times(this._height, (y) => {
            this._area.push([]);
            useful_functions_1.times(this._width, () => this._area[y].push(new block_1.EmptyBlock));
        });
    }
}
exports.Board = Board;
},{"../block":1,"../useful-functions":7}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const board_1 = require("../board");
const vector_1 = require("../vector");
class Controller {
    constructor(model, view) {
        this._model = model;
        this._view = view;
        this._isCreatedBlock = false;
    }
    _tryMoveBlock(block, move) {
        if (this._model.canDropBlock(block.vectors, move)) {
            const oldVectors = block.vectors;
            block.vectors = block.getBlockPosition(move);
            this._model.removeBlock(oldVectors);
            this._model.addBlock(block);
            this._view.removeBlock(oldVectors);
            this._view.renderBlock(block);
        }
        else if (move.y > 0) {
            this._isCreatedBlock = false;
        }
    }
    _createBlock() {
        const block = this._model.createBlock();
        if (block.vectors.length > 0) {
            this._view.renderBlock(block);
            this._isCreatedBlock = true;
            return block;
        }
        //konczymy gre, nie mozemy utworzyc nowego bloku, gdy length jest rowna 0
    }
    _startGame() {
        let block;
        window.addEventListener('keydown', e => {
            if (block) {
                switch (e.keyCode) {
                    case 37:
                        this._tryMoveBlock(block, new vector_1.Vector(-1, 0));
                        break;
                    case 39:
                        this._tryMoveBlock(block, new vector_1.Vector(1, 0));
                        break;
                }
            }
        });
        return setInterval(() => {
            if (!this._isCreatedBlock) {
                const result = this._model.clearLine();
                if (result) {
                    const area = this._model.board.area;
                    this._view.renderAllTemplate(area);
                    console.log(area);
                }
            }
            if (this._isCreatedBlock) {
                this._tryMoveBlock(block, new vector_1.Vector(0, 1));
            }
            else {
                block = this._createBlock();
            }
        }, 100);
    }
    init() {
        const board = new board_1.Board(10, 20);
        this._model.saveBoard(board);
        this._view.renderAllTemplate(board.area);
        const run = this._startGame();
    }
}
exports.Controller = Controller;
},{"../board":2,"../vector":8}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOM = {
    blockTmpl: Handlebars.compile(document.getElementById('block-template').innerHTML),
    board: document.querySelector('.board')
};
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("./model");
const view_1 = require("./view");
const controller_1 = require("./controller");
const controller = new controller_1.Controller(new model_1.Model, new view_1.View);
controller.init();
},{"./controller":3,"./model":6,"./view":9}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const block_1 = require("../block");
const vector_1 = require("../vector");
const useful_functions_1 = require("../useful-functions");
class Model {
    constructor() { }
    get board() {
        return this._board;
    }
    _checkVectorFitArray(array, vector) {
        return vector.y < array.length && vector.y >= 0 && vector.x >= 0 && vector.x < array[0].length;
    }
    _checkIsPositionFree(positions) {
        const typeOfEmptyBlock = new block_1.EmptyBlock().type;
        const index = positions.findIndex((vector) => {
            if (this._checkVectorFitArray(this._board.area, vector)) {
                return this._board.area[vector.y][vector.x].type !== typeOfEmptyBlock;
            }
            else {
                return true;
            }
        });
        return index === -1;
    }
    _checkFreeSpaces(block) {
        const spaces = [];
        const amountSpacesToCheck = this._board.area[0].length - Math.floor(block.width / 2);
        useful_functions_1.times(amountSpacesToCheck, (x) => {
            const areaVectors = block.getBlockPosition(new vector_1.Vector(x, 0));
            if (this._checkIsPositionFree(areaVectors)) {
                spaces.push(areaVectors);
            }
        });
        return spaces;
    }
    _randomValueFromArray(array) {
        return array[Math.floor(Math.random() * array.length)];
    }
    _saveBlock(block) {
        const spaces = this._checkFreeSpaces(block);
        if (spaces.length <= 0) {
            block.vectors = [];
            return;
        }
        block.vectors = this._randomValueFromArray(spaces);
        this.addBlock(block);
    }
    _filterProperVectorToMoveDown(properVectors, vector) {
        const pVectorIndex = properVectors.findIndex((pVector) => pVector.x === vector.x);
        if (pVectorIndex === -1) {
            properVectors.push(new vector_1.Vector(vector.x, vector.y));
        }
        else if (properVectors[pVectorIndex].y < vector.y) {
            properVectors[pVectorIndex].y = vector.y;
        }
    }
    _filterProperVectorToMoveRight(properVectors, vector) {
        const pVectorIndex = properVectors.findIndex((pVector) => pVector.y === vector.y);
        if (pVectorIndex === -1) {
            properVectors.push(new vector_1.Vector(vector.x, vector.y));
        }
        else if (properVectors[pVectorIndex].x < vector.x) {
            properVectors[pVectorIndex].x = vector.x;
        }
    }
    _filterProperVectorToMoveLeft(properVectors, vector) {
        const pVectorIndex = properVectors.findIndex((pVector) => pVector.y === vector.y);
        if (pVectorIndex === -1) {
            properVectors.push(new vector_1.Vector(vector.x, vector.y));
        }
        else if (properVectors[pVectorIndex].x > vector.x) {
            properVectors[pVectorIndex].x = vector.x;
        }
    }
    _filterProperVectorToMove(properVectors, vector, move) {
        if (move.y === 1) {
            this._filterProperVectorToMoveDown(properVectors, vector);
        }
        else if (move.x === 1) {
            this._filterProperVectorToMoveRight(properVectors, vector);
        }
        else if (move.x === -1) {
            this._filterProperVectorToMoveLeft(properVectors, vector);
        }
    }
    saveBoard(board) {
        this._board = board;
        this._board.initArea();
        this._blocks = [
            new block_1.OBlock
        ];
    }
    createBlock() {
        const blockSource = this._randomValueFromArray(this._blocks);
        const block = Object.assign(new block_1.Block, blockSource);
        this._saveBlock(block);
        return block;
    }
    canDropBlock(positions, move) {
        const properVectors = [];
        positions.forEach((vector) => this._filterProperVectorToMove(properVectors, vector, move));
        const droppedVectors = properVectors.map((vector) => vector.plus(move));
        return this._checkIsPositionFree(droppedVectors);
    }
    removeBlock(vectors) {
        vectors.forEach((vector) => this._board.setAreaBlock(vector, new block_1.EmptyBlock));
    }
    addBlock(block) {
        block.vectors.forEach((vector) => this._board.setAreaBlock(vector, block));
    }
    clearLine() {
        const typeOfEmptyBlock = new block_1.EmptyBlock().type;
        let lineIndex = 0;
        const rowsToDrop = [];
        this._board.area.forEach((blocks) => {
            const index = blocks.findIndex((block) => block.type === typeOfEmptyBlock);
            if (index === -1) {
                rowsToDrop.push(lineIndex);
            }
            lineIndex++;
        });
        if (rowsToDrop.length > 0) {
            const emptyRow = [];
            const emptyBlockType = new block_1.EmptyBlock().type;
            useful_functions_1.times(10, () => {
                emptyRow.push(new block_1.EmptyBlock);
            });
            rowsToDrop.forEach((index) => {
                this._board.area.splice(index, 1);
                useful_functions_1.times(index, (y) => {
                    useful_functions_1.times(this._board.area[0].length, (x) => {
                        if (this._board.area[y][x].type !== emptyBlockType) {
                            this._board.area[y][x].vectors.forEach((vector) => vector.y++);
                        }
                    });
                });
                this._board.area.unshift(emptyRow);
            });
            return true;
        }
        else {
            return false;
        }
    }
}
exports.Model = Model;
},{"../block":1,"../useful-functions":7,"../vector":8}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function times(times, fn) {
    let output = "";
    for (let i = 0; i < times; i++) {
        output += fn(i);
    }
    return output;
}
exports.times = times;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Vector {
    constructor(x, y) {
        this._x = x;
        this._y = y;
    }
    get x() {
        return this._x;
    }
    get y() {
        return this._y;
    }
    set x(x) {
        this._x = x;
    }
    set y(y) {
        this._y = y;
    }
    plus(vector) {
        return new Vector(this._x + vector.x, this._y + vector.y);
    }
    getId() {
        return parseInt(this._y.toString() + this._x.toString());
    }
}
exports.Vector = Vector;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dom_elements_1 = require("../dom-elements");
const block_1 = require("../block");
class View {
    constructor() {
    }
    _getBlockById(id) {
        return document.getElementById('bid-' + id);
    }
    _addTypeToBlock(el, type) {
        el.className = "block block__" + type;
    }
    renderAllTemplate(area) {
        let id = 0;
        const flattened = area.reduce((sum, value) => sum.concat(value), []);
        const output = flattened.reduce((html, block) => html += dom_elements_1.DOM.blockTmpl({ type: block.type, id: id++ }), "");
        dom_elements_1.DOM.board.innerHTML = output;
    }
    renderBlock(block) {
        block.vectors.forEach((vector) => {
            const id = vector.getId();
            const el = this._getBlockById(id);
            this._addTypeToBlock(el, block.type);
        });
    }
    removeBlock(vectors) {
        const typeOfEmptyBlock = new block_1.EmptyBlock().type;
        vectors.forEach((vector) => {
            const id = vector.getId();
            const el = this._getBlockById(id);
            this._addTypeToBlock(el, typeOfEmptyBlock);
        });
    }
}
exports.View = View;
},{"../block":1,"../dom-elements":4}]},{},[3,6,9,5,2,4,7,1,8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
