(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vector_1 = require("../vector");
class Block {
    constructor() { }
    getBlockPosition(startPosition) {
        return this._vectors.map((vector) => vector.plus(startPosition));
    }
    get type() {
        return this._type;
    }
    get width() {
        return this._width;
    }
    set vectors(vectors) {
        this._vectors = vectors;
    }
    get vectors() {
        return this._vectors;
    }
}
exports.Block = Block;
class EmptyBlock extends Block {
    constructor() {
        super();
        this._type = 'empty';
    }
}
exports.EmptyBlock = EmptyBlock;
class OBlock extends Block {
    constructor() {
        super();
        this._type = 'o';
        this._vectors = [
            new vector_1.Vector(0, 0),
            new vector_1.Vector(1, 0),
            new vector_1.Vector(0, 1),
            new vector_1.Vector(1, 1)
        ];
        this._width = 2;
        this._height = 2;
    }
}
exports.OBlock = OBlock;
},{"../vector":8}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const useful_functions_1 = require("../useful-functions");
const block_1 = require("../block");
const vector_1 = require("../vector");
class Board {
    constructor(width, height) {
        this._width = width;
        this._height = height;
    }
    get width() {
        return this._width;
    }
    set width(width) {
        this._width = width;
    }
    get height() {
        return this._height;
    }
    set height(height) {
        this._height = height;
    }
    get area() {
        return this._area;
    }
    setAreaBlock(vector, block) {
        this._area[vector.y][vector.x].value = block;
    }
    initArea() {
        this._area = [];
        useful_functions_1.times(this._height, (y) => {
            this._area.push([]);
            useful_functions_1.times(this._width, (x) => {
                const id = new vector_1.Vector(x, y).getId();
                this._area[y].push({
                    value: new block_1.EmptyBlock,
                    id: id
                });
            });
        });
    }
}
exports.Board = Board;
},{"../block":1,"../useful-functions":7,"../vector":8}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const board_1 = require("../board");
const vector_1 = require("../vector");
class Controller {
    constructor(model, view) {
        this._model = model;
        this._view = view;
        this._createdBlock = false;
    }
    _tryDropBlock(block) {
        if (this._model.canDropBlock(block.vectors)) {
            const oldVectors = block.vectors;
            block.vectors = block.getBlockPosition(new vector_1.Vector(0, 1));
            this._model.removeBlock(oldVectors);
            this._model.addBlock(block);
            this._view.removeBlock(oldVectors);
            this._view.renderBlock(block);
        }
        else {
            this._createdBlock = false;
        }
    }
    _createBlock() {
        const block = this._model.createBlock();
        if (block.vectors.length > 0) {
            this._view.renderBlock(block);
            this._createdBlock = true;
            return block;
        }
        //konczymy gre, nie mozemy utworzyc nowego bloku, gdy length jest rowna 0
    }
    _startGame() {
        let block;
        return setInterval(() => {
            if (this._createdBlock) {
                this._tryDropBlock(block);
            }
            else {
                block = this._createBlock();
            }
        }, 2000);
    }
    init() {
        const board = new board_1.Board(10, 20);
        this._model.saveBoard(board);
        this._view.renderEmptyTemplate(board.area);
        const run = this._startGame();
    }
}
exports.Controller = Controller;
},{"../board":2,"../vector":8}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOM = {
    blockTmpl: Handlebars.compile(document.getElementById('block-template').innerHTML),
    board: document.querySelector('.board')
};
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("./model");
const view_1 = require("./view");
const controller_1 = require("./controller");
const controller = new controller_1.Controller(new model_1.Model, new view_1.View);
controller.init();
},{"./controller":3,"./model":6,"./view":9}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const block_1 = require("../block");
const vector_1 = require("../vector");
const useful_functions_1 = require("../useful-functions");
class Model {
    constructor() { }
    _checkIsPositionFree(positions) {
        const index = positions.findIndex((vector) => !this._board.area[vector.y][vector.x].value.type);
        return index === -1;
    }
    _checkFreeSpaces(block) {
        const spaces = [];
        const amountSpacesToCheck = this._board.area[0].length - Math.floor(block.width / 2);
        useful_functions_1.times(amountSpacesToCheck, (x) => {
            const areaVectors = block.getBlockPosition(new vector_1.Vector(x, 0));
            if (this._checkIsPositionFree(areaVectors)) {
                spaces.push(areaVectors);
            }
        });
        return spaces;
    }
    _randomValueFromArray(array) {
        return array[Math.floor(Math.random() * array.length)];
    }
    _saveBlock(block) {
        const spaces = this._checkFreeSpaces(block);
        if (spaces.length <= 0) {
            block.vectors = [];
            return;
        }
        block.vectors = this._randomValueFromArray(spaces);
        this.addBlock(block);
    }
    saveBoard(board) {
        this._board = board;
        this._board.initArea();
        this._blocks = [
            new block_1.OBlock
        ];
    }
    createBlock() {
        const blockSource = this._randomValueFromArray(this._blocks);
        const block = Object.assign(new block_1.Block, blockSource);
        console.log(blockSource);
        console.log(block);
        this._saveBlock(block);
        return block;
    }
    canDropBlock(positions) {
        const droppedPositions = positions.map((vector) => vector.plus(new vector_1.Vector(0, 1)));
        return this._checkIsPositionFree(droppedPositions);
    }
    removeBlock(vectors) {
        vectors.forEach((vector) => this._board.setAreaBlock(vector, new block_1.EmptyBlock));
    }
    addBlock(block) {
        block.vectors.forEach((vector) => this._board.setAreaBlock(vector, block));
    }
}
exports.Model = Model;
},{"../block":1,"../useful-functions":7,"../vector":8}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function times(times, fn) {
    let output = "";
    for (let i = 0; i < times; i++) {
        output += fn(i);
    }
    return output;
}
exports.times = times;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Vector {
    constructor(x, y) {
        this._x = x;
        this._y = y;
    }
    get x() {
        return this._x;
    }
    get y() {
        return this._y;
    }
    plus(vector) {
        return new Vector(this._x + vector.x, this._y + vector.y);
    }
    getId() {
        return parseInt(this._y.toString() + this._x.toString());
    }
}
exports.Vector = Vector;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dom_elements_1 = require("../dom-elements");
class View {
    constructor() {
    }
    _getBlockById(id) {
        return document.getElementById('bid-' + id);
    }
    _addTypeToBlock(el, type) {
        el.className = "block block__" + type;
    }
    renderEmptyTemplate(area) {
        const flattened = area.reduce((sum, value) => sum.concat(value), []);
        const output = flattened.reduce((html, block) => html += dom_elements_1.DOM.blockTmpl({
            type: block.value.type,
            id: block.id
        }), "");
        dom_elements_1.DOM.board.innerHTML = output;
    }
    renderBlock(block) {
        block.vectors.forEach((vector) => {
            const id = vector.getId();
            const el = this._getBlockById(id);
            this._addTypeToBlock(el, block.type);
        });
    }
    removeBlock(vectors) {
        vectors.forEach((vector) => {
            const id = vector.getId();
            const el = this._getBlockById(id);
            this._addTypeToBlock(el, 'empty');
        });
    }
}
exports.View = View;
},{"../dom-elements":4}]},{},[3,6,9,5,2,4,7,1,8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzb3VyY2UvdHMvYmxvY2svaW5kZXgudHMiLCJzb3VyY2UvdHMvYm9hcmQvaW5kZXgudHMiLCJzb3VyY2UvdHMvY29udHJvbGxlci9pbmRleC50cyIsInNvdXJjZS90cy9kb20tZWxlbWVudHMvaW5kZXgudHMiLCJzb3VyY2UvdHMvbWFpbi50cyIsInNvdXJjZS90cy9tb2RlbC9pbmRleC50cyIsInNvdXJjZS90cy91c2VmdWwtZnVuY3Rpb25zL2luZGV4LnRzIiwic291cmNlL3RzL3ZlY3Rvci9pbmRleC50cyIsInNvdXJjZS90cy92aWV3L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxzQ0FBbUM7QUFFbkM7SUFPSSxnQkFBZSxDQUFDO0lBRWhCLGdCQUFnQixDQUFDLGFBQXFCO1FBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQWMsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxPQUFPLENBQUMsT0FBaUI7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQTVCRCxzQkE0QkM7QUFFRCxnQkFBd0IsU0FBUSxLQUFLO0lBRWpDO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUFQ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QyxPQUFPLENBQUMsQ0FBQyxNQUFjO1lBRTNCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMxQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXRDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBdkRELG9CQXVEQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJsb2NrIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3ZlY3RvcnM6IFZlY3RvcltdO1xyXG4gICAgcHJvdGVjdGVkIF90eXBlOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX3dpZHRoOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgX2hlaWdodDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgICBnZXRCbG9ja1Bvc2l0aW9uKHN0YXJ0UG9zaXRpb246IFZlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92ZWN0b3JzLm1hcCgodmVjdG9yOiBWZWN0b3IpID0+IHZlY3Rvci5wbHVzKHN0YXJ0UG9zaXRpb24pKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgd2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB2ZWN0b3JzKHZlY3RvcnM6IFZlY3RvcltdKSB7XHJcbiAgICAgICAgdGhpcy5fdmVjdG9ycyA9IHZlY3RvcnM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZlY3RvcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZlY3RvcnM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbXB0eUJsb2NrIGV4dGVuZHMgQmxvY2sge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3R5cGUgPSAnZW1wdHknO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT0Jsb2NrIGV4dGVuZHMgQmxvY2sge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3R5cGUgPSAnbyc7XHJcbiAgICAgICAgdGhpcy5fdmVjdG9ycyA9IFtcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAwKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigxLCAwKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAxKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigxLCAxKVxyXG4gICAgICAgIF1cclxuXHJcbiAgICAgICAgdGhpcy5fd2lkdGggPSAyO1xyXG4gICAgICAgIHRoaXMuX2hlaWdodCA9IDI7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyB0aW1lcyB9IGZyb20gJy4uL3VzZWZ1bC1mdW5jdGlvbnMnO1xyXG5pbXBvcnQgeyBFbXB0eUJsb2NrLCBCbG9jayB9IGZyb20gJy4uL2Jsb2NrJztcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCb2FyZCB7XHJcbiAgICBcclxuICAgIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2FyZWE6IHt2YWx1ZTogQmxvY2ssIGlkOiBudW1iZXJ9W11bXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB3aWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHdpZHRoKHdpZHRoOiBudW1iZXIpIHtcclxuICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBoZWlnaHQoaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHRcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYXJlYSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXJlYTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBcmVhQmxvY2sodmVjdG9yOiBWZWN0b3IsIGJsb2NrOiBCbG9jaykge1xyXG4gICAgICAgIHRoaXMuX2FyZWFbdmVjdG9yLnldW3ZlY3Rvci54XS52YWx1ZSA9IGJsb2NrOyBcclxuICAgIH1cclxuXHJcbiAgICBpbml0QXJlYSgpIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9hcmVhID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGltZXModGhpcy5faGVpZ2h0LCAoeTogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hcmVhLnB1c2goW10pO1xyXG4gICAgICAgICAgICB0aW1lcyh0aGlzLl93aWR0aCwgKHg6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkOiBudW1iZXIgPSBuZXcgVmVjdG9yKHgsIHkpLmdldElkKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hcmVhW3ldLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBFbXB0eUJsb2NrLFxyXG4gICAgICAgICAgICAgICAgICAgaWQ6IGlkIFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IHsgTW9kZWwgfSBmcm9tICcuLi9tb2RlbCc7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuLi92aWV3JztcclxuaW1wb3J0IHsgQm9hcmQgfSBmcm9tICcuLi9ib2FyZCc7XHJcbmltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vYmxvY2snO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xsZXIge1xyXG5cclxuICAgIHByaXZhdGUgX21vZGVsOiBNb2RlbDtcclxuICAgIHByaXZhdGUgX3ZpZXc6IFZpZXc7XHJcbiAgICBwcml2YXRlIF9jcmVhdGVkQmxvY2s6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IE1vZGVsLCB2aWV3OiBWaWV3KSB7XHJcbiAgICAgICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcclxuICAgICAgICB0aGlzLl92aWV3ID0gdmlldztcclxuICAgICAgICB0aGlzLl9jcmVhdGVkQmxvY2sgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF90cnlEcm9wQmxvY2soYmxvY2s6IEJsb2NrKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYodGhpcy5fbW9kZWwuY2FuRHJvcEJsb2NrKGJsb2NrLnZlY3RvcnMpKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBvbGRWZWN0b3JzID0gYmxvY2sudmVjdG9ycztcclxuICAgICAgICAgICAgYmxvY2sudmVjdG9ycyA9IGJsb2NrLmdldEJsb2NrUG9zaXRpb24obmV3IFZlY3RvcigwLCAxKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbC5yZW1vdmVCbG9jayhvbGRWZWN0b3JzKTtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWwuYWRkQmxvY2soYmxvY2spO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdmlldy5yZW1vdmVCbG9jayhvbGRWZWN0b3JzKTtcclxuICAgICAgICAgICAgdGhpcy5fdmlldy5yZW5kZXJCbG9jayhibG9jayk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZWRCbG9jayA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jcmVhdGVCbG9jaygpIHtcclxuXHJcbiAgICAgICAgY29uc3QgYmxvY2s6IEJsb2NrID0gdGhpcy5fbW9kZWwuY3JlYXRlQmxvY2soKTtcclxuICAgICAgICBpZihibG9jay52ZWN0b3JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fdmlldy5yZW5kZXJCbG9jayhibG9jayk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZWRCbG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiBibG9jaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8va29uY3p5bXkgZ3JlLCBuaWUgbW96ZW15IHV0d29yenljIG5vd2VnbyBibG9rdSwgZ2R5IGxlbmd0aCBqZXN0IHJvd25hIDBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zdGFydEdhbWUoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGJsb2NrOiBCbG9jaztcclxuXHJcbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2NyZWF0ZWRCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5RHJvcEJsb2NrKGJsb2NrKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgYmxvY2sgPSB0aGlzLl9jcmVhdGVCbG9jaygpO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgIH0sIDIwMDApO1xyXG5cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBpbml0KCkge1xyXG5cclxuICAgICAgICBjb25zdCBib2FyZCA9IG5ldyBCb2FyZCgxMCwgMjApO1xyXG4gICAgICAgIHRoaXMuX21vZGVsLnNhdmVCb2FyZChib2FyZCk7XHJcbiAgICAgICAgdGhpcy5fdmlldy5yZW5kZXJFbXB0eVRlbXBsYXRlKGJvYXJkLmFyZWEpO1xyXG5cclxuXHJcbiAgICAgICAgY29uc3QgcnVuID0gdGhpcy5fc3RhcnRHYW1lKCk7ICAgICAgXHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY29uc3QgRE9NID0ge1xyXG4gICAgYmxvY2tUbXBsOiBIYW5kbGViYXJzLmNvbXBpbGUoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdibG9jay10ZW1wbGF0ZScpLmlubmVySFRNTCApLFxyXG4gICAgYm9hcmQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2FyZCcpXHJcbn0iLCJpbXBvcnQgeyBNb2RlbCB9IGZyb20gJy4vbW9kZWwnO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcclxuaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJy4vY29udHJvbGxlcic7XHJcblxyXG5jb25zdCBjb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXIobmV3IE1vZGVsLCBuZXcgVmlldyk7XHJcbmNvbnRyb2xsZXIuaW5pdCgpO1xyXG4iLCJpbXBvcnQgeyBCb2FyZCB9IGZyb20gJy4uL2JvYXJkJztcclxuaW1wb3J0IHsgQmxvY2ssIE9CbG9jaywgRW1wdHlCbG9jayB9IGZyb20gJy4uL2Jsb2NrJztcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcclxuaW1wb3J0IHsgdGltZXMgfSBmcm9tICcuLi91c2VmdWwtZnVuY3Rpb25zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNb2RlbCB7XHJcblxyXG4gICAgcHJpdmF0ZSBfYm9hcmQ6IEJvYXJkO1xyXG4gICAgcHJpdmF0ZSBfYmxvY2tzOiBCbG9ja1tdO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gICAgcHJpdmF0ZSBfY2hlY2tJc1Bvc2l0aW9uRnJlZShwb3NpdGlvbnM6IFZlY3RvcltdKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHBvc2l0aW9ucy5maW5kSW5kZXgoKHZlY3RvcjogVmVjdG9yKSA9PiAhdGhpcy5fYm9hcmQuYXJlYVt2ZWN0b3IueV1bdmVjdG9yLnhdLnZhbHVlLnR5cGUgKTtcclxuICAgICAgICByZXR1cm4gaW5kZXggPT09IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NoZWNrRnJlZVNwYWNlcyhibG9jazogQmxvY2spIHtcclxuXHJcbiAgICAgICAgY29uc3Qgc3BhY2VzOiBWZWN0b3JbXVtdID0gW107XHJcbiAgICAgICAgY29uc3QgYW1vdW50U3BhY2VzVG9DaGVjazogbnVtYmVyID0gdGhpcy5fYm9hcmQuYXJlYVswXS5sZW5ndGggLSBNYXRoLmZsb29yKGJsb2NrLndpZHRoIC8gMik7XHJcblxyXG4gICAgICAgIHRpbWVzKGFtb3VudFNwYWNlc1RvQ2hlY2ssICh4Om51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgYXJlYVZlY3RvcnM6IFZlY3RvcltdID0gYmxvY2suZ2V0QmxvY2tQb3NpdGlvbihuZXcgVmVjdG9yKHgsIDApKTtcclxuICAgICAgICAgICAgaWYodGhpcy5fY2hlY2tJc1Bvc2l0aW9uRnJlZShhcmVhVmVjdG9ycykpIHtcclxuICAgICAgICAgICAgICAgIHNwYWNlcy5wdXNoKGFyZWFWZWN0b3JzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNwYWNlcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9yYW5kb21WYWx1ZUZyb21BcnJheShhcnJheTogYW55W10pIHsgXHJcbiAgICAgICAgcmV0dXJuIGFycmF5W01hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiBhcnJheS5sZW5ndGggKV07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc2F2ZUJsb2NrKGJsb2NrOiBCbG9jaykge1xyXG5cclxuICAgICAgICBjb25zdCBzcGFjZXM6IFZlY3RvcltdW10gPSB0aGlzLl9jaGVja0ZyZWVTcGFjZXMoYmxvY2spO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHNwYWNlcy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICBibG9jay52ZWN0b3JzID0gW107XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgYmxvY2sudmVjdG9ycyA9IHRoaXMuX3JhbmRvbVZhbHVlRnJvbUFycmF5KHNwYWNlcyk7XHJcbiAgICAgICAgdGhpcy5hZGRCbG9jayhibG9jayk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZUJvYXJkKGJvYXJkOiBCb2FyZCkge1xyXG5cclxuICAgICAgICB0aGlzLl9ib2FyZCA9IGJvYXJkO1xyXG4gICAgICAgIHRoaXMuX2JvYXJkLmluaXRBcmVhKCk7XHJcbiAgICAgICAgdGhpcy5fYmxvY2tzID0gW1xyXG4gICAgICAgICAgICBuZXcgT0Jsb2NrXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVCbG9jaygpIHtcclxuICAgICAgICBjb25zdCBibG9ja1NvdXJjZTogQmxvY2sgPSB0aGlzLl9yYW5kb21WYWx1ZUZyb21BcnJheSh0aGlzLl9ibG9ja3MpO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrOiBCbG9jayA9IE9iamVjdC5hc3NpZ24obmV3IEJsb2NrLCBibG9ja1NvdXJjZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYmxvY2tTb3VyY2UpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGJsb2NrKTtcclxuICAgICAgICB0aGlzLl9zYXZlQmxvY2soYmxvY2spO1xyXG4gICAgICAgIHJldHVybiBibG9jaztcclxuICAgIH1cclxuXHJcbiAgICBjYW5Ecm9wQmxvY2socG9zaXRpb25zOiBWZWN0b3JbXSkge1xyXG4gICAgICAgIGNvbnN0IGRyb3BwZWRQb3NpdGlvbnM6IFZlY3RvcltdID0gcG9zaXRpb25zLm1hcCgodmVjdG9yOiBWZWN0b3IpID0+IHZlY3Rvci5wbHVzKG5ldyBWZWN0b3IoMCwgMSkpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tJc1Bvc2l0aW9uRnJlZShkcm9wcGVkUG9zaXRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVCbG9jayh2ZWN0b3JzOiBWZWN0b3JbXSkge1xyXG4gICAgICAgIHZlY3RvcnMuZm9yRWFjaCgodmVjdG9yOiBWZWN0b3IpID0+IHRoaXMuX2JvYXJkLnNldEFyZWFCbG9jayh2ZWN0b3IsIG5ldyBFbXB0eUJsb2NrKSApO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEJsb2NrKGJsb2NrOiBCbG9jaykge1xyXG4gICAgICAgIGJsb2NrLnZlY3RvcnMuZm9yRWFjaCgodmVjdG9yOiBWZWN0b3IpID0+IHRoaXMuX2JvYXJkLnNldEFyZWFCbG9jayh2ZWN0b3IsIGJsb2NrKSApO1xyXG4gICAgfVxyXG5cclxufSIsImV4cG9ydCBmdW5jdGlvbiB0aW1lcyh0aW1lczogbnVtYmVyLCBmbjogYW55KSB7XHJcbiAgICBcclxuICAgIGxldCBvdXRwdXQgPSBcIlwiO1xyXG5cclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aW1lczsgaSsrKSB7XHJcbiAgICAgICAgIG91dHB1dCArPSBmbihpKTsgICBcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb3V0cHV0O1xyXG59IiwiZXhwb3J0IGNsYXNzIFZlY3RvciB7XHJcblxyXG4gICAgcHJpdmF0ZSBfeDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfeTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5feCA9IHg7XHJcbiAgICAgICAgdGhpcy5feSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3g7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3k7XHJcbiAgICB9XHJcblxyXG4gICAgcGx1cyh2ZWN0b3I6IFZlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHRoaXMuX3ggKyB2ZWN0b3IueCwgdGhpcy5feSArIHZlY3Rvci55KTsgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KCB0aGlzLl95LnRvU3RyaW5nKCkgKyB0aGlzLl94LnRvU3RyaW5nKCkgKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IERPTSB9IGZyb20gJy4uL2RvbS1lbGVtZW50cyc7XHJcbmltcG9ydCB7IHRpbWVzIH0gZnJvbSAnLi4vdXNlZnVsLWZ1bmN0aW9ucyc7XHJcbmltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vYmxvY2snO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZpZXcge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldEJsb2NrQnlJZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaWQtJyArIGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9hZGRUeXBlVG9CbG9jayhlbDogSFRNTEVsZW1lbnQsIHR5cGU6IHN0cmluZykge1xyXG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IFwiYmxvY2sgYmxvY2tfX1wiICsgdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJFbXB0eVRlbXBsYXRlKGFyZWE6IHsgdmFsdWU6IEJsb2NrLCBpZDogbnVtYmVyIH1bXVtdKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGZsYXR0ZW5lZCA9IGFyZWEucmVkdWNlKFxyXG4gICAgICAgICAgICAoIHN1bTogeyB2YWx1ZTogQmxvY2ssIGlkOiBudW1iZXIgfVtdLCBcclxuICAgICAgICAgICAgICB2YWx1ZTogeyB2YWx1ZTogQmxvY2ssIGlkOiBudW1iZXIgfVtdICkgPT4gXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHN1bS5jb25jYXQodmFsdWUpLCBbXSBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBmbGF0dGVuZWQucmVkdWNlKFxyXG4gICAgICAgICAgICAoIGh0bWw6IHN0cmluZywgXHJcbiAgICAgICAgICAgICAgYmxvY2s6IHsgdmFsdWU6IEJsb2NrLCBpZDogbnVtYmVyIH0gKSA9PiBcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gRE9NLmJsb2NrVG1wbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogYmxvY2sudmFsdWUudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBpZDogYmxvY2suaWRcclxuICAgICAgICAgICAgICAgIH0pLCBcIlwiXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgRE9NLmJvYXJkLmlubmVySFRNTCA9IG91dHB1dDtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJCbG9jayhibG9jazogQmxvY2spIHtcclxuICAgICAgICBcclxuICAgICAgICBibG9jay52ZWN0b3JzLmZvckVhY2goKHZlY3RvcjogVmVjdG9yKSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBpZCA9IHZlY3Rvci5nZXRJZCgpO1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuX2dldEJsb2NrQnlJZChpZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FkZFR5cGVUb0Jsb2NrKGVsLCBibG9jay50eXBlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVCbG9jayh2ZWN0b3JzOiBWZWN0b3JbXSkge1xyXG5cclxuICAgICAgICB2ZWN0b3JzLmZvckVhY2goKHZlY3RvcjogVmVjdG9yKSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBpZCA9IHZlY3Rvci5nZXRJZCgpO1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuX2dldEJsb2NrQnlJZChpZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FkZFR5cGVUb0Jsb2NrKGVsLCAnZW1wdHknKTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=
