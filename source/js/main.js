(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vector_1 = require("../vector");
class Block {
    constructor() { }
    getBlockPosition(startPosition) {
        return this._vectors.map((vector) => vector.plus(startPosition));
    }
    get type() {
        return this._type;
    }
    get width() {
        return this._width;
    }
    set vectors(vectors) {
        this._vectors = vectors;
    }
    get vectors() {
        return this._vectors;
    }
}
exports.Block = Block;
class EmptyBlock extends Block {
    constructor() {
        super();
        this._type = 'empty';
    }
}
exports.EmptyBlock = EmptyBlock;
class OBlock extends Block {
    constructor() {
        super();
        this._type = 'o';
        this._vectors = [
            new vector_1.Vector(0, 0),
            new vector_1.Vector(1, 0),
            new vector_1.Vector(0, 1),
            new vector_1.Vector(1, 1)
        ];
        this._width = 2;
        this._height = 2;
    }
}
exports.OBlock = OBlock;
},{"../vector":8}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const useful_functions_1 = require("../useful-functions");
const block_1 = require("../block");
const vector_1 = require("../vector");
class Board {
    constructor(width, height) {
        this._width = width;
        this._height = height;
    }
    get width() {
        return this._width;
    }
    set width(width) {
        this._width = width;
    }
    get height() {
        return this._height;
    }
    set height(height) {
        this._height = height;
    }
    get area() {
        return this._area;
    }
    setAreaBlock(vector, block) {
        this._area[vector.y][vector.x].value = block;
    }
    initArea() {
        this._area = [];
        useful_functions_1.times(this._height, (y) => {
            this._area.push([]);
            useful_functions_1.times(this._width, (x) => {
                const id = new vector_1.Vector(x, y).getId();
                this._area[y].push({
                    value: new block_1.EmptyBlock,
                    id: id
                });
            });
        });
    }
}
exports.Board = Board;
},{"../block":1,"../useful-functions":7,"../vector":8}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const board_1 = require("../board");
const vector_1 = require("../vector");
class Controller {
    constructor(model, view) {
        this._model = model;
        this._view = view;
        this._createdBlock = false;
    }
    _tryDropBlock(block) {
        if (this._model.canDropBlock(block.vectors)) {
            const oldVectors = block.vectors;
            block.vectors = block.getBlockPosition(new vector_1.Vector(0, 1));
            this._model.removeBlock(oldVectors);
            this._model.addBlock(block);
            this._view.removeBlock(oldVectors);
            this._view.renderBlock(block);
        }
        else {
            this._createdBlock = false;
        }
    }
    _createBlock() {
        const block = this._model.createBlock();
        if (block.vectors.length > 0) {
            this._view.renderBlock(block);
            this._createdBlock = true;
            return block;
        }
        //konczymy gre, nie mozemy utworzyc nowego bloku, gdy length jest rowna 0
    }
    _startGame() {
        let block;
        return setInterval(() => {
            if (this._createdBlock) {
                this._tryDropBlock(block);
            }
            else {
                block = this._createBlock();
            }
        }, 200);
    }
    init() {
        const board = new board_1.Board(10, 20);
        this._model.saveBoard(board);
        this._view.renderEmptyTemplate(board.area);
        const run = this._startGame();
    }
}
exports.Controller = Controller;
},{"../board":2,"../vector":8}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOM = {
    blockTmpl: Handlebars.compile(document.getElementById('block-template').innerHTML),
    board: document.querySelector('.board')
};
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("./model");
const view_1 = require("./view");
const controller_1 = require("./controller");
const controller = new controller_1.Controller(new model_1.Model, new view_1.View);
controller.init();
},{"./controller":3,"./model":6,"./view":9}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const block_1 = require("../block");
const vector_1 = require("../vector");
const useful_functions_1 = require("../useful-functions");
class Model {
    constructor() { }
    _checkVectorFitArray(array, vector) {
        return vector.y < array.length && vector.y >= 0 && vector.x >= 0 && vector.x < array[0].length;
    }
    _checkIsPositionFree(positions) {
        const typeOfEmptyBlock = new block_1.EmptyBlock().type;
        const index = positions.findIndex((vector) => {
            if (this._checkVectorFitArray(this._board.area, vector)) {
                return this._board.area[vector.y][vector.x].value.type !== typeOfEmptyBlock;
            }
            else {
                return true;
            }
        });
        return index === -1;
    }
    _checkFreeSpaces(block) {
        const spaces = [];
        const amountSpacesToCheck = this._board.area[0].length - Math.floor(block.width / 2);
        useful_functions_1.times(amountSpacesToCheck, (x) => {
            const areaVectors = block.getBlockPosition(new vector_1.Vector(x, 0));
            if (this._checkIsPositionFree(areaVectors)) {
                spaces.push(areaVectors);
            }
        });
        return spaces;
    }
    _randomValueFromArray(array) {
        return array[Math.floor(Math.random() * array.length)];
    }
    _saveBlock(block) {
        const spaces = this._checkFreeSpaces(block);
        if (spaces.length <= 0) {
            block.vectors = [];
            return;
        }
        block.vectors = this._randomValueFromArray(spaces);
        this.addBlock(block);
    }
    saveBoard(board) {
        this._board = board;
        this._board.initArea();
        this._blocks = [
            new block_1.OBlock
        ];
    }
    createBlock() {
        const blockSource = this._randomValueFromArray(this._blocks);
        const block = Object.assign(new block_1.Block, blockSource);
        this._saveBlock(block);
        return block;
    }
    canDropBlock(positions) {
        const properVectors = [];
        positions.forEach((vector) => {
            const pVectorIndex = properVectors.findIndex((pVector) => pVector.x === vector.x);
            if (pVectorIndex === -1) {
                properVectors.push(new vector_1.Vector(vector.x, vector.y));
            }
            else {
                if (properVectors[pVectorIndex].y < vector.y) {
                    properVectors[pVectorIndex].y = vector.y;
                }
            }
        });
        const droppedVectors = properVectors.map((vector) => vector.plus(new vector_1.Vector(0, 1)));
        return this._checkIsPositionFree(droppedVectors);
    }
    removeBlock(vectors) {
        vectors.forEach((vector) => this._board.setAreaBlock(vector, new block_1.EmptyBlock));
    }
    addBlock(block) {
        block.vectors.forEach((vector) => this._board.setAreaBlock(vector, block));
    }
}
exports.Model = Model;
},{"../block":1,"../useful-functions":7,"../vector":8}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function times(times, fn) {
    let output = "";
    for (let i = 0; i < times; i++) {
        output += fn(i);
    }
    return output;
}
exports.times = times;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Vector {
    constructor(x, y) {
        this._x = x;
        this._y = y;
    }
    get x() {
        return this._x;
    }
    get y() {
        return this._y;
    }
    set x(x) {
        this._x = x;
    }
    set y(y) {
        this._y = y;
    }
    plus(vector) {
        return new Vector(this._x + vector.x, this._y + vector.y);
    }
    getId() {
        return parseInt(this._y.toString() + this._x.toString());
    }
}
exports.Vector = Vector;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dom_elements_1 = require("../dom-elements");
const block_1 = require("../block");
class View {
    constructor() {
    }
    _getBlockById(id) {
        return document.getElementById('bid-' + id);
    }
    _addTypeToBlock(el, type) {
        el.className = "block block__" + type;
    }
    renderEmptyTemplate(area) {
        const flattened = area.reduce((sum, value) => sum.concat(value), []);
        const output = flattened.reduce((html, block) => html += dom_elements_1.DOM.blockTmpl({
            type: block.value.type,
            id: block.id
        }), "");
        dom_elements_1.DOM.board.innerHTML = output;
    }
    renderBlock(block) {
        block.vectors.forEach((vector) => {
            const id = vector.getId();
            const el = this._getBlockById(id);
            this._addTypeToBlock(el, block.type);
        });
    }
    removeBlock(vectors) {
        const typeOfEmptyBlock = new block_1.EmptyBlock().type;
        vectors.forEach((vector) => {
            const id = vector.getId();
            const el = this._getBlockById(id);
            this._addTypeToBlock(el, typeOfEmptyBlock);
        });
    }
}
exports.View = View;
},{"../block":1,"../dom-elements":4}]},{},[3,6,9,5,2,4,7,1,8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzb3VyY2UvdHMvYmxvY2svaW5kZXgudHMiLCJzb3VyY2UvdHMvYm9hcmQvaW5kZXgudHMiLCJzb3VyY2UvdHMvY29udHJvbGxlci9pbmRleC50cyIsInNvdXJjZS90cy9kb20tZWxlbWVudHMvaW5kZXgudHMiLCJzb3VyY2UvdHMvbWFpbi50cyIsInNvdXJjZS90cy9tb2RlbC9pbmRleC50cyIsInNvdXJjZS90cy91c2VmdWwtZnVuY3Rpb25zL2luZGV4LnRzIiwic291cmNlL3RzL3ZlY3Rvci9pbmRleC50cyIsInNvdXJjZS90cy92aWV3L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxzQ0FBbUM7QUFFbkM7SUFPSSxnQkFBZSxDQUFDO0lBRWhCLGdCQUFnQixDQUFDLGFBQXFCO1FBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQWMsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxPQUFPLENBQUMsT0FBaUI7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQTVCRCxzQkE0QkM7QUFFRCxnQkFBd0IsU0FBUSxLQUFLO0lBRWpDO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUFQ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RUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFpQjtRQUV6QixNQUFNLGdCQUFnQixHQUFHLElBQUksa0JBQVUsRUFBRSxDQUFDLElBQUksQ0FBQztRQUUvQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBYztZQUUzQixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDMUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRS9DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBekRELG9CQXlEQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJsb2NrIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3ZlY3RvcnM6IFZlY3RvcltdO1xyXG4gICAgcHJvdGVjdGVkIF90eXBlOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX3dpZHRoOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgX2hlaWdodDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgICBnZXRCbG9ja1Bvc2l0aW9uKHN0YXJ0UG9zaXRpb246IFZlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92ZWN0b3JzLm1hcCgodmVjdG9yOiBWZWN0b3IpID0+IHZlY3Rvci5wbHVzKHN0YXJ0UG9zaXRpb24pKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgd2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB2ZWN0b3JzKHZlY3RvcnM6IFZlY3RvcltdKSB7XHJcbiAgICAgICAgdGhpcy5fdmVjdG9ycyA9IHZlY3RvcnM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZlY3RvcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZlY3RvcnM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbXB0eUJsb2NrIGV4dGVuZHMgQmxvY2sge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3R5cGUgPSAnZW1wdHknO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT0Jsb2NrIGV4dGVuZHMgQmxvY2sge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3R5cGUgPSAnbyc7XHJcbiAgICAgICAgdGhpcy5fdmVjdG9ycyA9IFtcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAwKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigxLCAwKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAxKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigxLCAxKVxyXG4gICAgICAgIF1cclxuXHJcbiAgICAgICAgdGhpcy5fd2lkdGggPSAyO1xyXG4gICAgICAgIHRoaXMuX2hlaWdodCA9IDI7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyB0aW1lcyB9IGZyb20gJy4uL3VzZWZ1bC1mdW5jdGlvbnMnO1xyXG5pbXBvcnQgeyBFbXB0eUJsb2NrLCBCbG9jayB9IGZyb20gJy4uL2Jsb2NrJztcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCb2FyZCB7XHJcbiAgICBcclxuICAgIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2FyZWE6IHt2YWx1ZTogQmxvY2ssIGlkOiBudW1iZXJ9W11bXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB3aWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHdpZHRoKHdpZHRoOiBudW1iZXIpIHtcclxuICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBoZWlnaHQoaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHRcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYXJlYSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXJlYTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBcmVhQmxvY2sodmVjdG9yOiBWZWN0b3IsIGJsb2NrOiBCbG9jaykge1xyXG4gICAgICAgIHRoaXMuX2FyZWFbdmVjdG9yLnldW3ZlY3Rvci54XS52YWx1ZSA9IGJsb2NrOyBcclxuICAgIH1cclxuXHJcbiAgICBpbml0QXJlYSgpIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9hcmVhID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGltZXModGhpcy5faGVpZ2h0LCAoeTogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hcmVhLnB1c2goW10pO1xyXG4gICAgICAgICAgICB0aW1lcyh0aGlzLl93aWR0aCwgKHg6IG51bWJlcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkOiBudW1iZXIgPSBuZXcgVmVjdG9yKHgsIHkpLmdldElkKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hcmVhW3ldLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBFbXB0eUJsb2NrLFxyXG4gICAgICAgICAgICAgICAgICAgaWQ6IGlkIFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IHsgTW9kZWwgfSBmcm9tICcuLi9tb2RlbCc7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuLi92aWV3JztcclxuaW1wb3J0IHsgQm9hcmQgfSBmcm9tICcuLi9ib2FyZCc7XHJcbmltcG9ydCB7IEJsb2NrIH0gZnJvbSAnLi4vYmxvY2snO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xsZXIge1xyXG5cclxuICAgIHByaXZhdGUgX21vZGVsOiBNb2RlbDtcclxuICAgIHByaXZhdGUgX3ZpZXc6IFZpZXc7XHJcbiAgICBwcml2YXRlIF9jcmVhdGVkQmxvY2s6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kZWw6IE1vZGVsLCB2aWV3OiBWaWV3KSB7XHJcbiAgICAgICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcclxuICAgICAgICB0aGlzLl92aWV3ID0gdmlldztcclxuICAgICAgICB0aGlzLl9jcmVhdGVkQmxvY2sgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF90cnlEcm9wQmxvY2soYmxvY2s6IEJsb2NrKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYodGhpcy5fbW9kZWwuY2FuRHJvcEJsb2NrKGJsb2NrLnZlY3RvcnMpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZlY3RvcnMgPSBibG9jay52ZWN0b3JzO1xyXG4gICAgICAgICAgICBibG9jay52ZWN0b3JzID0gYmxvY2suZ2V0QmxvY2tQb3NpdGlvbihuZXcgVmVjdG9yKDAsIDEpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsLnJlbW92ZUJsb2NrKG9sZFZlY3RvcnMpO1xyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbC5hZGRCbG9jayhibG9jayk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl92aWV3LnJlbW92ZUJsb2NrKG9sZFZlY3RvcnMpO1xyXG4gICAgICAgICAgICB0aGlzLl92aWV3LnJlbmRlckJsb2NrKGJsb2NrKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlZEJsb2NrID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NyZWF0ZUJsb2NrKCkge1xyXG5cclxuICAgICAgICBjb25zdCBibG9jazogQmxvY2sgPSB0aGlzLl9tb2RlbC5jcmVhdGVCbG9jaygpO1xyXG4gICAgICAgIGlmKGJsb2NrLnZlY3RvcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl92aWV3LnJlbmRlckJsb2NrKGJsb2NrKTtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlZEJsb2NrID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9rb25jenlteSBncmUsIG5pZSBtb3plbXkgdXR3b3J6eWMgbm93ZWdvIGJsb2t1LCBnZHkgbGVuZ3RoIGplc3Qgcm93bmEgMFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3N0YXJ0R2FtZSgpIHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgYmxvY2s6IEJsb2NrO1xyXG5cclxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy5fY3JlYXRlZEJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlEcm9wQmxvY2soYmxvY2spO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICBibG9jayA9IHRoaXMuX2NyZWF0ZUJsb2NrKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0sIDIwMCk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvYXJkID0gbmV3IEJvYXJkKDEwLCAyMCk7XHJcbiAgICAgICAgdGhpcy5fbW9kZWwuc2F2ZUJvYXJkKGJvYXJkKTtcclxuICAgICAgICB0aGlzLl92aWV3LnJlbmRlckVtcHR5VGVtcGxhdGUoYm9hcmQuYXJlYSk7XHJcblxyXG5cclxuICAgICAgICBjb25zdCBydW4gPSB0aGlzLl9zdGFydEdhbWUoKTsgICAgICBcclxuICAgIH1cclxufSIsImV4cG9ydCBjb25zdCBET00gPSB7XHJcbiAgICBibG9ja1RtcGw6IEhhbmRsZWJhcnMuY29tcGlsZSggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jsb2NrLXRlbXBsYXRlJykuaW5uZXJIVE1MICksXHJcbiAgICBib2FyZDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvYXJkJylcclxufSIsImltcG9ydCB7IE1vZGVsIH0gZnJvbSAnLi9tb2RlbCc7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xyXG5pbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnLi9jb250cm9sbGVyJztcclxuXHJcbmNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcihuZXcgTW9kZWwsIG5ldyBWaWV3KTtcclxuY29udHJvbGxlci5pbml0KCk7XHJcbiIsImltcG9ydCB7IEJvYXJkIH0gZnJvbSAnLi4vYm9hcmQnO1xyXG5pbXBvcnQgeyBCbG9jaywgT0Jsb2NrLCBFbXB0eUJsb2NrIH0gZnJvbSAnLi4vYmxvY2snO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xyXG5pbXBvcnQgeyB0aW1lcyB9IGZyb20gJy4uL3VzZWZ1bC1mdW5jdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vZGVsIHtcclxuXHJcbiAgICBwcml2YXRlIF9ib2FyZDogQm9hcmQ7XHJcbiAgICBwcml2YXRlIF9ibG9ja3M6IEJsb2NrW107XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgICBwcml2YXRlIF9jaGVja1ZlY3RvckZpdEFycmF5KGFycmF5OiBhbnlbXVtdLCB2ZWN0b3I6IFZlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiB2ZWN0b3IueSA8IGFycmF5Lmxlbmd0aCAmJiB2ZWN0b3IueSA+PSAwICYmIHZlY3Rvci54ID49IDAgJiYgdmVjdG9yLnggPCBhcnJheVswXS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY2hlY2tJc1Bvc2l0aW9uRnJlZShwb3NpdGlvbnM6IFZlY3RvcltdKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZU9mRW1wdHlCbG9jayA9IG5ldyBFbXB0eUJsb2NrKCkudHlwZTtcclxuICAgICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gcG9zaXRpb25zLmZpbmRJbmRleCgodmVjdG9yOiBWZWN0b3IpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2NoZWNrVmVjdG9yRml0QXJyYXkodGhpcy5fYm9hcmQuYXJlYSwgdmVjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JvYXJkLmFyZWFbdmVjdG9yLnldW3ZlY3Rvci54XS52YWx1ZS50eXBlICE9PSB0eXBlT2ZFbXB0eUJsb2NrO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSAtMTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jaGVja0ZyZWVTcGFjZXMoYmxvY2s6IEJsb2NrKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHNwYWNlczogVmVjdG9yW11bXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGFtb3VudFNwYWNlc1RvQ2hlY2s6IG51bWJlciA9IHRoaXMuX2JvYXJkLmFyZWFbMF0ubGVuZ3RoIC0gTWF0aC5mbG9vcihibG9jay53aWR0aCAvIDIpO1xyXG5cclxuICAgICAgICB0aW1lcyhhbW91bnRTcGFjZXNUb0NoZWNrLCAoeDpudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGFyZWFWZWN0b3JzOiBWZWN0b3JbXSA9IGJsb2NrLmdldEJsb2NrUG9zaXRpb24obmV3IFZlY3Rvcih4LCAwKSk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2NoZWNrSXNQb3NpdGlvbkZyZWUoYXJlYVZlY3RvcnMpKSB7XHJcbiAgICAgICAgICAgICAgICBzcGFjZXMucHVzaChhcmVhVmVjdG9ycyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzcGFjZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmFuZG9tVmFsdWVGcm9tQXJyYXkoYXJyYXk6IGFueVtdKSB7IFxyXG4gICAgICAgIHJldHVybiBhcnJheVtNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoICldO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NhdmVCbG9jayhibG9jazogQmxvY2spIHtcclxuXHJcbiAgICAgICAgY29uc3Qgc3BhY2VzOiBWZWN0b3JbXVtdID0gdGhpcy5fY2hlY2tGcmVlU3BhY2VzKGJsb2NrKTtcclxuICAgICAgICBcclxuICAgICAgICBpZihzcGFjZXMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgYmxvY2sudmVjdG9ycyA9IFtdO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGJsb2NrLnZlY3RvcnMgPSB0aGlzLl9yYW5kb21WYWx1ZUZyb21BcnJheShzcGFjZXMpO1xyXG4gICAgICAgIHRoaXMuYWRkQmxvY2soYmxvY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVCb2FyZChib2FyZDogQm9hcmQpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fYm9hcmQgPSBib2FyZDtcclxuICAgICAgICB0aGlzLl9ib2FyZC5pbml0QXJlYSgpO1xyXG4gICAgICAgIHRoaXMuX2Jsb2NrcyA9IFtcclxuICAgICAgICAgICAgbmV3IE9CbG9ja1xyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQmxvY2soKSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2tTb3VyY2U6IEJsb2NrID0gdGhpcy5fcmFuZG9tVmFsdWVGcm9tQXJyYXkodGhpcy5fYmxvY2tzKTtcclxuICAgICAgICBjb25zdCBibG9jazogQmxvY2sgPSBPYmplY3QuYXNzaWduKG5ldyBCbG9jaywgYmxvY2tTb3VyY2UpO1xyXG4gICAgICAgIHRoaXMuX3NhdmVCbG9jayhibG9jayk7XHJcbiAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbkRyb3BCbG9jayhwb3NpdGlvbnM6IFZlY3RvcltdKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb3BlclZlY3RvcnM6IFZlY3RvcltdID0gW107XHJcblxyXG4gICAgICAgIHBvc2l0aW9ucy5mb3JFYWNoKCh2ZWN0b3I6IFZlY3RvcikgPT4ge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgcFZlY3RvckluZGV4OiBudW1iZXIgPSBwcm9wZXJWZWN0b3JzLmZpbmRJbmRleCgocFZlY3RvcjogVmVjdG9yKSA9PiBwVmVjdG9yLnggPT09IHZlY3Rvci54KTtcclxuXHJcbiAgICAgICAgICAgIGlmKHBWZWN0b3JJbmRleCA9PT0gLTEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJWZWN0b3JzLnB1c2gobmV3IFZlY3Rvcih2ZWN0b3IueCwgdmVjdG9yLnkpKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYocHJvcGVyVmVjdG9yc1twVmVjdG9ySW5kZXhdLnkgPCB2ZWN0b3IueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlclZlY3RvcnNbcFZlY3RvckluZGV4XS55ID0gdmVjdG9yLnk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZHJvcHBlZFZlY3RvcnMgPSBwcm9wZXJWZWN0b3JzLm1hcCgodmVjdG9yOiBWZWN0b3IpID0+IHZlY3Rvci5wbHVzKG5ldyBWZWN0b3IoMCwgMSkpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrSXNQb3NpdGlvbkZyZWUoZHJvcHBlZFZlY3RvcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUJsb2NrKHZlY3RvcnM6IFZlY3RvcltdKSB7XHJcbiAgICAgICAgdmVjdG9ycy5mb3JFYWNoKCh2ZWN0b3I6IFZlY3RvcikgPT4gdGhpcy5fYm9hcmQuc2V0QXJlYUJsb2NrKHZlY3RvciwgbmV3IEVtcHR5QmxvY2spICk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQmxvY2soYmxvY2s6IEJsb2NrKSB7XHJcbiAgICAgICAgYmxvY2sudmVjdG9ycy5mb3JFYWNoKCh2ZWN0b3I6IFZlY3RvcikgPT4gdGhpcy5fYm9hcmQuc2V0QXJlYUJsb2NrKHZlY3RvciwgYmxvY2spICk7XHJcbiAgICB9XHJcblxyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIHRpbWVzKHRpbWVzOiBudW1iZXIsIGZuOiBhbnkpIHtcclxuICAgIFxyXG4gICAgbGV0IG91dHB1dCA9IFwiXCI7XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRpbWVzOyBpKyspIHtcclxuICAgICAgICAgb3V0cHV0ICs9IGZuKGkpOyAgIFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbn0iLCJleHBvcnQgY2xhc3MgVmVjdG9yIHtcclxuXHJcbiAgICBwcml2YXRlIF94OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF95OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl94ID0geDtcclxuICAgICAgICB0aGlzLl95ID0geTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgeCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5feDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5feTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgeCh4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl94ID0geDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgeSh5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl95ID0geTtcclxuICAgIH1cclxuXHJcbiAgICBwbHVzKHZlY3RvcjogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodGhpcy5feCArIHZlY3Rvci54LCB0aGlzLl95ICsgdmVjdG9yLnkpOyBcclxuICAgIH1cclxuXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoIHRoaXMuX3kudG9TdHJpbmcoKSArIHRoaXMuX3gudG9TdHJpbmcoKSApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRE9NIH0gZnJvbSAnLi4vZG9tLWVsZW1lbnRzJztcclxuaW1wb3J0IHsgdGltZXMgfSBmcm9tICcuLi91c2VmdWwtZnVuY3Rpb25zJztcclxuaW1wb3J0IHsgQmxvY2ssIEVtcHR5QmxvY2sgfSBmcm9tICcuLi9ibG9jayc7XHJcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgVmlldyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZ2V0QmxvY2tCeUlkKGlkOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JpZC0nICsgaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2FkZFR5cGVUb0Jsb2NrKGVsOiBIVE1MRWxlbWVudCwgdHlwZTogc3RyaW5nKSB7XHJcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gXCJibG9jayBibG9ja19fXCIgKyB0eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckVtcHR5VGVtcGxhdGUoYXJlYTogeyB2YWx1ZTogQmxvY2ssIGlkOiBudW1iZXIgfVtdW10pIHtcclxuXHJcbiAgICAgICAgY29uc3QgZmxhdHRlbmVkID0gYXJlYS5yZWR1Y2UoXHJcbiAgICAgICAgICAgICggc3VtOiB7IHZhbHVlOiBCbG9jaywgaWQ6IG51bWJlciB9W10sIFxyXG4gICAgICAgICAgICAgIHZhbHVlOiB7IHZhbHVlOiBCbG9jaywgaWQ6IG51bWJlciB9W10gKSA9PiBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgc3VtLmNvbmNhdCh2YWx1ZSksIFtdIFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGZsYXR0ZW5lZC5yZWR1Y2UoXHJcbiAgICAgICAgICAgICggaHRtbDogc3RyaW5nLCBcclxuICAgICAgICAgICAgICBibG9jazogeyB2YWx1ZTogQmxvY2ssIGlkOiBudW1iZXIgfSApID0+IFxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaHRtbCArPSBET00uYmxvY2tUbXBsKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBibG9jay52YWx1ZS50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBibG9jay5pZFxyXG4gICAgICAgICAgICAgICAgfSksIFwiXCJcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBET00uYm9hcmQuaW5uZXJIVE1MID0gb3V0cHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckJsb2NrKGJsb2NrOiBCbG9jaykge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGJsb2NrLnZlY3RvcnMuZm9yRWFjaCgodmVjdG9yOiBWZWN0b3IpID0+IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdmVjdG9yLmdldElkKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5fZ2V0QmxvY2tCeUlkKGlkKTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkVHlwZVRvQmxvY2soZWwsIGJsb2NrLnR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUJsb2NrKHZlY3RvcnM6IFZlY3RvcltdKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHR5cGVPZkVtcHR5QmxvY2sgPSBuZXcgRW1wdHlCbG9jaygpLnR5cGU7XHJcblxyXG4gICAgICAgIHZlY3RvcnMuZm9yRWFjaCgodmVjdG9yOiBWZWN0b3IpID0+IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdmVjdG9yLmdldElkKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5fZ2V0QmxvY2tCeUlkKGlkKTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkVHlwZVRvQmxvY2soZWwsIHR5cGVPZkVtcHR5QmxvY2spO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==
